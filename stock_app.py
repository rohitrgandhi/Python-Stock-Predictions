# -*- coding: utf-8 -*-
"""stock_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mDz_JSTD9f_ESSrgIwwbWlNf9zDh46ki

Installing Libraries
"""

# stock_app.py

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import streamlit as st

# Streamlit app title
st.title('Stock Price Analysis and Prediction')

# Get user input for stock symbol and date range
stock_symbol = st.text_input('Enter Stock Symbol (e.g., AAPL)', 'AAPL')
start_date = st.date_input('Start Date', value=pd.to_datetime('2018-01-01'))
end_date = st.date_input('End Date', value=pd.to_datetime('2024-01-01'))

# Fetch stock data
data = yf.download(stock_symbol, start=start_date, end=end_date)

# Check if data is available
if not data.empty:
    # Show stock data
    st.subheader(f"{stock_symbol} Stock Data from {start_date} to {end_date}")
    st.write(data.tail())

    # Plot closing price
    st.subheader(f'{stock_symbol} Closing Price')
    st.line_chart(data['Close'])

    # Feature Engineering: Moving Averages
    data['50_MA'] = data['Close'].rolling(window=50).mean()
    data['200_MA'] = data['Close'].rolling(window=200).mean()

    # Plot moving averages
    st.subheader(f'{stock_symbol} Moving Averages')
    st.line_chart(data[['Close', '50_MA', '200_MA']])

    # Prepare the data for the prediction model
    data = data.dropna()  # Remove rows with NaN values due to moving averages
    X = data[['50_MA', '200_MA']]  # Features: Moving Averages
    y = data['Close']  # Target: Closing Price

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Build and train the Linear Regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict the closing prices
    predictions = model.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, predictions)
    st.subheader('Model Evaluation')
    st.write(f'Mean Squared Error: {mse:.2f}')

    # Show actual vs predicted prices
    st.subheader('Actual vs Predicted Prices')
    comparison = pd.DataFrame({'Actual': y_test, 'Predicted': predictions})
    st.write(comparison.head())

    # Plot actual vs predicted prices
    plt.figure(figsize=(10, 5))
    plt.plot(y_test.index, y_test.values, label='Actual')
    plt.plot(y_test.index, predictions, label='Predicted')
    plt.legend()
    plt.title('Actual vs Predicted Prices')
    plt.xlabel('Date')
    plt.ylabel('Price (USD)')
    st.pyplot(plt)

else:
    st.write(f"No data available for {stock_symbol}. Please try another stock symbol.")